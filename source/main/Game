package com.tiledungeon.main;
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable {
	
	private static final long serialVersionUID = -8921419424614180143L;
	
	public static final int WIDTH = 640, HEIGHT = WIDTH / 12 * 9;
	public String TITLE = "Tile Dungeon";
	public int randomTickSpeed = 10;
	public int fps;
	
	public int viewX = 0;
	public int viewY = 0;
	public int dirX = 0;
	public int dirY = 0;
	
	public int time;
	
	private Thread thread;
	private boolean running = false;
	
	//private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	private BufferedImage bgImageGame = null;
	private BufferedImage bgImageMenu = null;
	
	//private Image iconImage = null;
	
	public BufferedImage spriteSheet = null;
	public BufferedImage slime = null;
	
	private int bgAnimation = 1;
	
	private Random r = new Random();
	
	private Handler handler;
	private HUD hud;
	private Spawn spawner;
	private Player player;
	private Menu menu;
	
	public static enum STATE{
		GAME,
		MENU_MAIN,
		MENU_ESC,
		MENU_OVER,
		OPTIONS,
	}
	
	static STATE state = STATE.MENU_MAIN;
	
	private JFrame frame;
	
	public void init(){
		BufferedImageLoader loader = new BufferedImageLoader();
		try{
			spriteSheet = loader.loadImage("/sprite_sheet.png");
			bgImageGame = loader.loadImage("/background.png");
			bgImageMenu = loader.loadImage("/background_menu.png");
			
			//iconImage = loader.loadImage("/TD_icon.png");
			
			slime = loader.loadImage("/Slime.png");
			
		}catch(IOException e){
			System.out.println("file not found");
			e.printStackTrace();
		}
		
		//Sound.sound1.loop();
		
		//handler.setBlock(2, 2, BlockID.Wall, 0);
		//handler.setBlock(60, 50, BlockID.Wall, 0);
		
	}
	
	public synchronized void start(){
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop(){
		try {
			thread.join();
			running = false;
		} catch (InterruptedException e) {
			System.out.println("ERROR: joining thread");
			e.printStackTrace();
		}
	}
	
	public Game(){
		
		handler = new Handler();
		 
		this.frame = new JFrame(TITLE);
		
		frame.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		frame.setMaximumSize(new Dimension(WIDTH, HEIGHT));
		frame.setMinimumSize(new Dimension(WIDTH, HEIGHT));
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.setLocationRelativeTo(null);
		frame.add(this);
		frame.setVisible(true);
		frame.pack();
		
		
		
		this.player = new Player(WIDTH/2, HEIGHT/2, 0, 0, EntityID.Player, 200, 200, 1, handler, this);
		handler.addEntity(player);
		
		this.addKeyListener(new KeyInput(player, handler));
		this.addMouseListener(new MouseInput(player, this));
		
		spawner = new Spawn(handler, player, this);
		hud = new HUD(player, this, spawner, handler);
		menu = new Menu(player, this);
		
		//handler.addEntity(new Wall(500, 300, 0, 0, EntityID.Wall, -1, -1, 1, handler, this));
		//handler.addEntity(new Wall(500, 332, 0, 0, EntityID.Wall, -1, -1, 1, handler, this));
		//handler.addEntity(new Wall(500, 364, 0, 0, EntityID.Wall, -1, -1, 1, handler, this));
		
		this.start();
		
		frame.requestFocus();
		
	}
	
	public void run(){
		init();
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				delta--;
			}
			if(running){
				render();
				
				frames++;
				
			}
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				fps = frames;
				frames = 0;
			}
		}
	}

	private void tick() {
		
		bgAnimation++;
		if(bgAnimation == 180)bgAnimation = 0;
		
		if(state == STATE.GAME){
			if(r.nextInt(1000) <= randomTickSpeed){
				spawner.randomTick();
			}
			
			handler.tick();
			spawner.tick();
			hud.tick();
		}else if(state == STATE.MENU_MAIN || state == STATE.MENU_ESC || state == STATE.MENU_OVER || state == STATE.OPTIONS){
			menu.tick();
		}
	}
	
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null){
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = bs.getDrawGraphics();
		////////////
		
		if(state == STATE.GAME){
			
			g.drawImage(bgImageGame.getSubimage(0, 0, WIDTH, HEIGHT), 0, 0, null);
			//g.setColor(Color.black);
			//g.fillRect(0, 0, WIDTH, HEIGHT);
			handler.render(g);
			hud.render(g);
		}else if(state == STATE.MENU_MAIN || state == STATE.MENU_ESC || state == STATE.MENU_OVER || state == STATE.OPTIONS){
			g.drawImage(bgImageMenu.getSubimage(0, 0, WIDTH, HEIGHT), 0, 0, null);
			//g.setColor(Color.black);
			//g.fillRect(0, 0, WIDTH, HEIGHT);
			menu.render(g);
		}
		////////////
		g.dispose();
		bs.show();
	}
	
	public static double clamp(double var, double min, double max){
		if(var >= max) return var = max;
		else if(var < min) return var = min;
		else return var;
	}
	/*
	public void reset(){
		
		for(int i = 1; i < handler.entity.size(); i++){
			Entity tempEntity = handler.entity.get(i);
				handler.removeEntity(tempEntity);
				System.out.println("removed!");
		}
		
		player.x = WIDTH/2;
		player.y = HEIGHT/2;
		player.velX = 0;
		player.velY = 0;
		player.attackCooldown = 0;
		player.bossesKilled = 0;
		player.enemiesKilled = 0;
		player.maxHealth = 20;
		player.health = player.maxHealth;
		
		
	}
	*/
	public static void main(String[] args){
		new Game();
	}
	
}
